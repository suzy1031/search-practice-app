import { useState } from 'react'
import { Controller, useForm } from 'react-hook-form'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import axios from 'axios'

import { IconButton, InputAdornment, TextField } from '@mui/material'
import Box from '@mui/material/Box'
import Card from '@mui/material/Card'
import CardActions from '@mui/material/CardActions'
import CardContent from '@mui/material/CardContent'
import Button from '@mui/material/Button'
import Typography from '@mui/material/Typography'
import SearchIcon from '@mui/icons-material/Search'

import AppRoot from './layout/AppRoot'

import encodeFreeWord from '../utils/encodedUtil'
import { BASE_URL } from '../constants/constants'
import { FormData, Result } from '../types/type'

const Home: NextPage = () => {
  const [result, setResult] = useState<Result>()
  const [formData, setFormData] = useState<FormData>({ searchText: '' })
  const {
    handleSubmit,
    control,
    formState: { errors, isValid },
  } = useForm<FormData>({
    mode: 'all',
    defaultValues: formData,
  })

  const onSearchSubmit = handleSubmit(async (data: FormData) => {
    console.log('search start', data.searchText)

    const encodedFreeWord = encodeFreeWord(data.searchText)

    // TODO: 他の検索条件を実装後にhook化
    try {
      axios
        .get(
          `${BASE_URL}&keyword=${encodedFreeWord}&page=1&applicationId=${process.env.NEXT_PUBLIC_KEY}`,
        )
        .then((response) => {
          setResult(response.data)
        })
        .catch((error) => console.log(error))
    } catch (error) {
      console.log('error')
    }
  })
  console.log('result', result)

  return (
    <>
      <Head>
        <title>Search Practice App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppRoot>
        <Box>
          <form action="./" onSubmit={onSearchSubmit}>
            <Controller
              name="searchText"
              control={control}
              rules={{
                required: 'required',
              }}
              defaultValue=""
              render={({ field }) => (
                <TextField
                  type="search"
                  fullWidth
                  {...field}
                  error={errors.searchText && true}
                  margin="dense"
                  size="small"
                  variant="outlined"
                  color="primary"
                  placeholder="商品の検索"
                  id="item-search-input"
                  required
                  helperText={
                    <>
                      {errors.searchText?.type === 'required' &&
                        '検索条件を入力してください。'}
                    </>
                  }
                  InputProps={{
                    endAdornment: (
                      <InputAdornment className="my-0 py-0" position="end">
                        <IconButton type="submit">
                          <SearchIcon />
                        </IconButton>
                      </InputAdornment>
                    ),
                    className: 'pr-0',
                  }}
                />
              )}
            />
            <Box className="my-3">
              <Button
                variant="contained"
                color="primary"
                type="submit"
                disabled={!isValid}
              >
                検索
              </Button>
            </Box>
          </form>
        </Box>
        <Box>
          {result &&
            result.Items.length >= 1 &&
            result.Items.map((item, index) => (
              <Typography color="primary" key={index}>
                {item.Item.itemPrice.toLocaleString()}
              </Typography>
            ))}
        </Box>
      </AppRoot>
    </>
  )
}

export default Home
